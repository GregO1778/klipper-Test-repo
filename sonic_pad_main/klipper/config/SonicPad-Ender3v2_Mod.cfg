# !Ender-3 V2 (W or W/O ABL)
# printer_size: 220x220x250
# version: 3.6
# This file contains pin mappings for the stock 2020 Creality Ender-3 V2 -/+ CRtouch 
# with a Creality 3D V4.2.7 board.
# Default for this config is CRTouch disabled
# To enable CRTouch, remove any comments designated as #X#
# Some lines will need to be commented out, these are marked with
# comments stating as such

# To use this config, during "make menuconfig" select the
# STM32F103 with a "28KiB bootloader" and serial (on USART1 PA10/PA9)
# communication.

# If you prefer a direct serial connection, in "make menuconfig"
# select "Enable extra low-level configuration options" and select
# serial (on USART3 PB11/PB10), which is broken out on the 10 pin IDC
# cable used for the LCD module as follows:
# 3: Tx, 4: Rx, 9: GND, 10: VCC

# Flash this firmware by copying "out/klipper.bin" to a SD card and
# turning on the printer with the card inserted. The firmware
# filename must end in ".bin" and must not match the last filename
# that was flashed.

############################
#   Cure Machine Settings
############################
#machine_start_gcode =
#;M201 X500.00 Y500.00 Z100.00 E5000.00 ;Setup machine max acceleration
#;M203 X500.00 Y500.00 Z10.00 E50.00 ;Setup machine max feedrate
#;M204 P500.00 R1000.00 T500.00 ;Setup Print/Retract/Travel acceleration
#;M205 X8.00 Y8.00 Z0.40 E5.00 ;Setup Jerk
#;M220 S100 ;Reset Feedrate
#;M221 S100 ;Reset Flowrate
#;
#;G28 ;Home
#;G29 ;Auto bed Level
#;
#;G92 E0 ;Reset Extruder
#;G1 Z2.0 F3000 ;Move Z Axis up
#;G1 X10.1 Y20 Z0.28 F5000.0 ;Move to start position
#;G1 X10.1 Y200.0 Z0.28 F1500.0 E15 ;Draw the first line
#;G1 X10.4 Y200.0 Z0.28 F5000.0 ;Move to side a little
#;G1 X10.4 Y20 Z0.28 F1500.0 E30 ;Draw the second line
#;G92 E0 ;Reset Extruder
#;G1 Z2.0 F3000 ;Move Z Axis up
#;
#;START_PRINT
#START_PRINT BED_TEMP={material_bed_temperature_layer_0} HOTEND_TEMP={material_print_temperature_layer_0}

#machine_end_gcode =
#;G91 ;Relative positioning
#;G1 E-2 F2700 ;Retract a bit
#;G1 E-2 Z0.2 F2400 ;Retract and raise Z
#;G1 X5 Y5 F3000 ;Wipe out
#;G1 Z10 ;Raise Z more
#;G90 ;Absolute positioning
#;
#;G1 X0 Y{machine_depth} ;Present print
#;M106 S0 ;Turn-off fan
#;M104 S0 ;Turn-off hotend
#;M140 S0 ;Turn-off bed
#;
#;M84 X Y E ;Disable all steppers but Z
#;
#END_PRINT

# This file contains pin mappings for the Creality CR-10 Smart. To use
# this config, the firmware should be compiled for the STM stm32f109.

# See docs/Config_Reference.md for a description of parameters.

############################
#      Include Configs
############################
### CR-10 Smart ####
#[include CR10Smart.cfg]
### Mainsail config ###
#[include mainsail.cfg]
### Fluidd config ###
#[include fluidd.cfg]
#[include client.cfg]
### Inoput Shaper ###
#[include inputShaper.cfg]
### Macros ###
#[include client_macros.cfg]
#[include macros/*.cfg]
### Accelerometer Confi ###
#[include PIS.cfg]
### Variables ###
#[save_variables]
#filename: ~/variables.cfg
### Timelaps ###
[include timelapse.cfg]
### Moonraker ###
#[include moonraker_obico_macros.cfg]
### fluidd set ###
[include cx_printer.cfg]
### Creality Sonic Pad ###
[include cx_gmcro.cfg]

############################
#      File directory
############################
###fluidd set
[virtual_sdcard]
path: ~/gcode_files

############################
#      File looping
############################
#[sdcard_loop]

############################
#      Display status
############################
[display_status]

############################
#      pause / resume
############################
[pause_resume]
#recover_velocity: 50.0

############################
#        x steppers
############################
[stepper_x]
step_pin: PB9
dir_pin: PC2
enable_pin: !PC3
rotation_distance: 40
microsteps: 16
#full_steps_per_rotation: 200
endstop_pin: ^PA5
#position_min: 0
position_endstop: 0
position_max: 225   #disable to use bltouch
#X#position_max: 240  #enable to use bltouch
homing_speed: 80
#homing_retract_dist: 5

############################
#        y steppers
############################
[stepper_y]
step_pin: PB7
dir_pin: PB8
enable_pin: !PC3
rotation_distance: 40
microsteps: 16
#full_steps_per_rotation: 200
endstop_pin: ^PA6
#position_min: 0
position_endstop: 0
position_max: 225 
homing_speed: 80
#homing_retract_dist: 5

############################
#         z stepper
############################
[stepper_z]
step_pin: PB5
dir_pin: !PB6
enable_pin: !PC3
rotation_distance: 8
microsteps: 16
#full_steps_per_rotation: 200
#X#endstop_pin: probe:z_virtual_endstop  #enable to use bltouch
endstop_pin: ^PA7   #disable to use bltouch
position_endstop: 0.0  #disable to use bltouch
#X#position_min: -10  #enable to use bltouch
position_max: 255
#X#homing_speed: 4  #enable to use bltouch
#X#second_homing_speed: 1  #enable to use bltouch
#X#homing_retract_dist: 2.0  #enable to use bltouch

############################
#         extruder
############################
[extruder]
#max_extrude_only_distance: 500.0
max_extrude_only_distance: 1000.0
step_pin: PB3
dir_pin: PB4
enable_pin: !PC3
# Creality Stock Extruder
rotation_distance: 32.473
microsteps: 16
#full_steps_per_rotation: 200
nozzle_diameter: 0.400
filament_diameter: 1.750
#max_extrude_only_velocity: 70.0
#max_extrude_only_accel: 1000.0
#pressure_advance: 0.037000
#pressure_advance_smooth_time: 0.005000

############################
#      extruder Heater
############################
heater_pin: PA1
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC5
control: pid
# Creality Stock Hotend
# tuned for stock hardware with 200 degree Celsius target
pid_Kp: 29.291
pid_Ki: 1.743
pid_Kd: 123.021
min_temp: 0
max_temp: 265


[verify_heater extruder]
check_gain_time: 200
hysteresis: 5


############################
#        Bed heaters
############################
[heater_bed]
heater_pin: PA2
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC4
control: pid
# tuned for stock hardware with 50 degree Celsius target
pid_Kp: 67.104
pid_Ki: 0.544
pid_Kd: 2068.466
min_temp: 0
max_temp: 130

############################
#      idle timeout
############################
[idle_timeout]
timeout: 172800

[fan_generic extruder_fan]
# pin: PB15
pin: PC6
#max_power:
#shutdown_speed:
#cycle_time:
#hardware_pwm:
#kick_start_time:
#off_below:
#tachometer_pin:
#tachometer_ppr:
#tachometer_poll_interval:
#   See the "fan" section for a description of the above parameters.
#heater: extruder
#   Name of the config section defining the heater that this fan is
#   associated with. If a comma separated list of heater names is
#   provided here, then the fan will be enabled when any of the given
#   heaters are enabled. The default is "extruder".
#heater_temp: 50.0
#   A temperature (in Celsius) that the heater must drop below before
#   the fan is disabled. The default is 50 Celsius.
#fan_speed: 1.0
#   The fan speed (expressed as a value from 0.0 to 1.0) that the fan
#   will be set to when its associated heater is enabled. The default
#   is 1.0

############################
#       MCU fan
############################
[fan]
pin: PA0
#kick_start_time: 1.0

############################
#       Heater fan
############################
#set heater fan runnig with temperature over 50;
[heater_fan heater_fan]
pin: PB14
#max_power:
#shutdown_speed:
#cycle_time:
#hardware_pwm:
#kick_start_time:
#off_below:
#tachometer_pin:
#tachometer_ppr:
#tachometer_poll_interval:
#   See the "fan" section for a description of the above parameters.
#heater: extruder
#   Name of the config section defining the heater that this fan is
#   associated with. If a comma separated list of heater names is
#   provided here, then the fan will be enabled when any of the given
#   heaters are enabled. The default is "extruder".
#heater_temp: 50.0
#   A temperature (in Celsius) that the heater must drop below before
#   the fan is disabled. The default is 50 Celsius.
#fan_speed: 1.0
#   The fan speed (expressed as a value from 0.0 to 1.0) that the fan
#   will be set to when its associated heater is enabled. The default
#   is 1.0

############################
#            MCU
############################
[mcu]
serial: /dev/serial/by-id/usb_serial_1
#baud: 115200
restart_method: command

############################
#    MCU / pin alias
############################
#[board_pins my_aliases]
#mcu: mcu
#aliases:
#aliases_<name>:

############################
#      Duplicate pins
############################
#[duplicate_pin_override]
#pins: PA5

############################
#         ABL Prob
############################
#[probe]
#pin: 
#x_offset: 0.0
#y_offset: 0.0
#z_offset: 0.0
#speed: 2.0
#lift_speed: 5.0
#samples_tolerance: 0.05
#samples_tolerance_retries: 2
#samples: 1
#sample_retract_dist: 1.2
#samples_result: average

############################
#  Filament Runout sensor
############################
#[filament_switch_sensor filament_sensor]
#pause_on_runout: true
#switch_pin: 
#runout_gcode: PAUSE_PARK
#insert_gcode: RESUME

############################
#        Static pins
############################
#[static_digital_output daughterboard_communication]
#pins: 

############################
#   bl touch / cr touch
############################
#X#[bltouch]  #enable to use bltouch
#X#sensor_pin: ^PB1  #enable to use bltouch
#X#control_pin: PB0  #enable to use bltouch
#X#x_offset: -47.0  #enable to use bltouch
#X#y_offset: -5.0  #enable to use bltouch
#X#z_offset: 0  #enable to use bltouch
#X#speed: 20  #enable to use bltouch
#X#stow_on_each_sample = false  #enable to use bltouch
#X#samples: 2  #enable to use bltouch
#X#sample_retract_dist: 8.0  #enable to use bltouch
#probe_with_touch_mode = true

############################
#        Bed mesh
############################
#X#[bed_mesh]  #enable to use bltouch
#X#speed: 120  #enable to use bltouch
#X#mesh_min: 30,30  #enable to use bltouch
#X#mesh_max: 190,190  #enable to use bltouch
#horizontal_move_z: 5
#X#probe_count: 5,5  #enable to use bltouch
#X#fade_start: 1  #enable to use bltouch
#X#fade_end: 10  #enable to use bltouch
#X#fade_target: 0  #enable to use bltouch
#split_delta_z: .025
#move_check_distance: 5.0
#mesh_pps: 2, 2
#X#algorithm: bicubic  #enable to use bltouch
#bicubic_tension: .2

############################
#        Bed tilt
############################
#[bed_tilt]
#x_adjust: 0
#y_adjust: 0
#z_adjust: 0
#points:
#speed: 50
#horizontal_move_z: 5

############################
#        Bed screws
############################
# This is only valid if the "Bed Screw" mod has been performed
[bed_screws]
screw1: 30,25
screw1_name: front left screw
screw2: 200,25
screw2_name: front right screw
screw3: 200,195
screw3_name: rear right screw
screw4: 30,195
screw4_name: rear left screw
#horizontal_move_z: 10.0
# use the Creality supplied 0.2mm feeler gauge for manual adjustment to avoid bed damage
#probe_height: 0.2
#speed: 50
#probe_speed: 2
############################
#        Screw tilt
############################
#[screws_tilt_adjust]
#screw1: 30,25
#screw1_name: front left screw
#screw2: 200,25
#screw2_name: front right screw
#screw3: 200,195
#screw3_name: rear right screw
#screw4: 30,195
#screw4_name: rear left screw
#horizontal_move_z: 10.
#speed: 50.0
#screw_thread: CW-M4

############################
#          Z tilt
############################
#[z_tilt]
#z_positions:
#points:
#speed: 50
#horizontal_move_z: 5
#retries: 0
#retry_tolerance: 0

############################
#        z home
############################
#X#[safe_z_home]  #enable to use bltouch
#X#home_xy_position: 160,120  #enable to use bltouch
#X#speed: 150  #enable to use bltouch
#X#z_hop: 10  #enable to use bltouch
#X#z_hop_speed: 10  #enable to use bltouch

############################
#          MCU RPi
############################
#[mcu rpi]
#serial: /tmp/klipper_host_mcu

#[adxl345]
#cs_pin: rpi:None
#spi_speed: 2000000
#spi_bus: spidev2.0

#[resonance_tester]
#accel_chip: adxl345
#accel_per_hz: 70
#probe_points: 117.5,117.5,10

############################
#    X-Accelerometer chip
############################
#[adxl345 PISX]
#cs_pin: PISX:gpio9
#spi_software_sclk_pin: PISX:gpio10
#spi_software_mosi_pin: PISX:gpio11
#spi_software_miso_pin: PISX:gpio8
#axes_map: -z,x,y #BigTreeTech

############################
#    Y-Accelerometer chip
############################
#[adxl345 PISY]
#cs_pin: PISY:gpio9
#spi_software_sclk_pin: PISY:gpio10
#spi_software_mosi_pin: PISY:gpio11
#spi_software_miso_pin: PISY:gpio8
#axes_map: y,x,z #BigTreeTech

############################
#    Resonance tester
############################
#[resonance_tester]
#probe_points: 150,150,10
#accel_chip: adxl345
#accel_chip_x: adxl345 PISX
#accel_chip_y: adxl345 PISY

############################
#  Resonance compensation
############################
[input_shaper]
shaper_type_x: mzv
shaper_freq_x: 89.8
shaper_type_y: mzv
shaper_freq_y: 35.2
#shaper_type: mzv
#damping_ratio_x: 0.1
#damping_ratio_y: 0.1

############################
#           Arc
############################
[gcode_arcs]
#resolution: 0.5
#resolution: 1.0

############################
#          Printer
############################
[printer]
kinematics: cartesian
max_velocity: 300
# Stock CR-10 Smart extruder and hotend
max_accel: 5000
# max_accel_to_decel: 7000
#minimum_cruise_ratio: 0.5
square_corner_velocity: 5.0
max_z_velocity: 5

max_z_accel: 100

############################
#       Object cancel
############################
[exclude_object]

############################
#          Skew
############################
#[skew_correction]

############################
#      Override home
############################
#[homing_override]
#gcode:
#axes: xyz
#set_position_x:
#set_position_y:
#set_position_z:

############################
#   Endstop adjustment x
############################
#[endstop_phase stepper_x]
#endstop_accuracy:
#trigger_phase:
#endstop_align_zero: False

############################
#   Endstop adjustment y
############################
#[endstop_phase stepper_y]
#endstop_accuracy:
#trigger_phase:
#endstop_align_zero: False

############################
#   Endstop adjustment z
############################
#[endstop_phase stepper_z]
#endstop_accuracy:
#trigger_phase:
#endstop_align_zero: False

############################
#        Retraction
############################
#[firmware_retraction]
#retract_length: 0
#retract_length: 1.53
#   The length of filament (in mm) to retract when G10 is activated,
#   and to unretract when G11 is activated (but see
#   unretract_extra_length below). The default is 0 mm.
#retract_speed: 20
#   The speed of retraction, in mm/s. The default is 20 mm/s.
#unretract_extra_length: 0
#   The length (in mm) of *additional* filament to add when
#   unretracting.
#unretract_speed: 10
#   The speed of unretraction, in mm/s. The default is 10 mm/s.

############################
#   Heater error checking
############################
#[verify_heater heater_config_name]
#max_error: 120
#check_gain_time:
#hysteresis: 5
#heating_gain: 2

############################
#       Disable heater
############################
#[homing_heaters]
#steppers:
#heaters:

############################
#       Temp sensor
############################
#[thermistor my_thermistor]
#temperature1:
#resistance1:
#temperature2:
#resistance2:
#temperature3:
#resistance3:
#beta:

############################
#     Board Temp sensor
############################
#[temperature_sensor Board_MCU]
#sensor_type: temperature_mcu
#min_temp: 0
#max_temp: 100

############################
#        Force Move
############################
# This allows for moving of the head or bed without disabeling steppers
[force_move]
enable_force_move: True

############################
#         Responce
############################
#[respond]
#default_type: echo
#default_prefix: echo:

############################
#        LED lights
############################
#[output_pin LED_pin]
#pin: 
#pwm: False
#static_value:
#value: 0
#value: 1
#shutdown_value:
#maximum_mcu_duration:
#cycle_time: 0.100
#hardware_pwm: False
#scale:

############################
#        light bar
############################
#[output_pin lights]
#pin: 
#value: 1

############################
#      Power control
############################
# Turns off the printer
#[output_pin ps_on]
#pin: PA0
#value: 1
#shutdown_value: 1

############################
#         MACROS
############################

#[delayed_gcode macros_initialize]
#initial_duration: 0.0
#initial_duration: 1
#gcode:
#  INITIALIZE_VARIABLE VARIABLE=park_x VALUE=20
#  INITIALIZE_VARIABLE VARIABLE=park_y VALUE=290
#  INITIALIZE_VARIABLE VARIABLE=bowden_len VALUE=400
#

# [delayed_gcode AUTOSTART]
# initial_duration: 1
# gcode:
#   TURN_ON_MOTORS

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  #_TOOLHEAD_PARK_PAUSE_CANCEL
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
    #G91
    #G1 Z-{z_safe} F900 # return to print height
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  #x##### read extrude from  _TOOLHEAD_PARK_PAUSE_CANCEL  macro #####x#
  ##### read E from pause macro #####
  #{% set extrude = printer['gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL'].extrude %}
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    #M83
	G91
	#G1 E{extrude} F2100
    G1 E{E} F2100
	#{% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
#variable_park: True
gcode:
## Move head and retract only if not already in the pause state and park set to true
#  {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
#    _TOOLHEAD_PARK_PAUSE_CANCEL
#  {% endif %}
  TURN_OFF_HEATERS
  #M106 S0
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z4.5 F300
    G90
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}
    G28 X Y
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
    G1 Y{y_park} F2000
    M84
  CANCEL_PRINT_BASE

#[gcode_macro CANCEL_PRINT]
#description: Cancel the actual running print
#rename_existing: CANCEL_PRINT_BASE
#gcode:
#    TURN_OFF_HEATERS
#    CANCEL_PRINT_BASE

#[gcode_macro CANCEL_PRINT-2]
#description: Cancel the actual running print
#rename_existing: CANCEL_PRINT_BASE
#gcode:
#  TURN_OFF_HEATERS
#  CANCEL_PRINT_BASE

#[gcode_macro FW_Retract_PLA]
#gcode:
#    SET_RETRACTION [RETRACT_LENGTH=1.52] [RETRACT_SPEED=20] [UNRETRACT_EXTRA_LENGTH=0] [UNRETRACT_SPEED=10]

#[gcode_macro FW_Retract_PETG]
#gcode:
#    SET_RETRACTION [RETRACT_LENGTH=1.57] [RETRACT_SPEED=20] [UNRETRACT_EXTRA_LENGTH=0] [UNRETRACT_SPEED=10]

[gcode_macro CalibrateResonance]
gcode:
    BED_ALIGN
    SHAPER_CALIBRATE

[gcode_macro BED_LEVEL]
gcode:
    BED_MESH_CALIBRATE

[gcode_macro G27]
gcode:
  {% set default_x = printer.toolhead.axis_minimum.x + 20 %}
  {% set default_y = printer.toolhead.axis_minimum.y + 20 %}

  {% if 'save_variables' in printer %}
    {% set svv = printer.save_variables.variables %}
    {% if 'park_x' in svv %}
      {% set default_x = svv.park_x %}
    {% endif %}
    {% if 'park_y' in svv %}
      {% set default_y = svv.park_y %}
    {% endif %}
  {% endif %}

  {% set x = params.X|default(default_x)|float %}
  {% set y = params.Y|default(default_y)|float %}
  {% set z = params.Z|default(20)|float %}

  {% if printer.toolhead.homed_axes != "xyz" %}
    {action_respond_info("Please home XYZ first")}
  {% else %}
    SAVE_GCODE_STATE NAME=G27_state
    G91
    G1 Z{z}
    G90
    G1 X{x} Y{y} F3000
    RESTORE_GCODE_STATE NAME=G27_state MOVE=0
  {% endif %}

[gcode_macro G29]
gcode:
  {% set t = params.T|default(0)|float %}

  {% if printer.idle_timeout.state == "Printing" %}
    {action_respond_info("This command cannot be used while printing")}
  {% elif printer.toolhead.homed_axes != "xyz" %}
    {action_respond_info("Please home XYZ first")}
  {% else %}
    SAVE_GCODE_STATE NAME=G29_state
    G90
    G1 Z10 F240
    {% if t > 30.0 %}
      M190 S{t}
    {% endif %}
    BED_MESH_CALIBRATE
    {% if 'S' in params %}
      M140 S{params.S}
    {% endif %}
    G90
    G1 Z10 F240
    G1 X150 Y155 F6000
    RESTORE_GCODE_STATE NAME=G29_state MOVE=0
  {% endif %}

[gcode_macro CrealityG29]				#界面中增加G29指令
gcode:
  G28
  bed_mesh_calibrate
  G1 X0 Y0 Z10 F4200
  # save_config

[gcode_macro BED_ALIGN]
gcode:
    {% if printer.toolhead.homed_axes != 'XYZ' %}
        G28
    {% endif %}
    #Z_TILT_ADJUST
    #G28 Z

[gcode_macro INITIALIZE_VARIABLE]
gcode:
  {% if 'VARIABLE' not in params %}
    {action_respond_info("Missing VARIABLE parameter")}
  {% elif 'VALUE' not in params %}
    {action_respond_info("Missing VALUE parameter")}
  {% else %}
    {% set svv = printer.save_variables.variables %}
    {% if params.VARIABLE not in svv %}
      {% set escaped = params.VALUE|replace("\"", "\\\"") %}
      SAVE_VARIABLE VARIABLE={params.VARIABLE} VALUE="{escaped}"
    {% endif %}
  {% endif %}

[gcode_macro LAZY_HOME]
gcode:
  {% if printer.toolhead.homed_axes != "xyz" %}
    G28
  {% endif %}

[gcode_macro M204]
rename_existing: M204.1
gcode:
  {% set f = params.F|default(0.5)|float %}

  {% if 'S' in params %}
    {% set s = params.S|float %}
    SET_VELOCITY_LIMIT ACCEL={s} ACCEL_TO_DECEL={ s * f }
  {% else %}
    {% if 'P' in params %}
      {% set p = params.P|float %}
      {% if 'T' in params %}
        {% set t = params.T|float %}
        {% if p < t %}
          SET_VELOCITY_LIMIT ACCEL={p} ACCEL_TO_DECEL={ p * f }
        {% else %}
          SET_VELOCITY_LIMIT ACCEL={t} ACCEL_TO_DECEL={ t * f }
        {% endif %}
      {% else %}
        SET_VELOCITY_LIMIT ACCEL={p} ACCEL_TO_DECEL={ p * f }
      {% endif %}
    {% elif 'T' in params %}
      {% set t = params.T|float %}
      SET_VELOCITY_LIMIT ACCEL={t} ACCEL_TO_DECEL={ t * f }
    {% endif %}
  {% endif %}

[gcode_macro BOOTUP_CALIBRATE]
gcode:
    BED_ALIGN
    BED_LEVEL

[gcode_macro M205]
gcode:
  {% if 'X' in params %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.X}
  {% elif 'Y' in params %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.Y}
  {% endif %}

[gcode_macro M81]
gcode:
    set_pin pin=ps_on value=0
    set_pin pin=fan1 value=0

#[gcode_macro M600]
#gcode:
#  {% set default_x = printer.toolhead.axis_minimum.x + 20 %}
#  {% set default_y = printer.toolhead.axis_minimum.y + 20 %}
#  {% set default_e = 100 %}
#
#  {% if 'save_variables' in printer %}
#    {% set svv = printer.save_variables.variables %}
#    {% if 'park_x' in svv %}
#      {% set default_x = svv.park_x %}
#    {% endif %}
#    {% if 'park_y' in svv %}
#      {% set default_y = svv.park_y %}
#    {% endif %}
#    {% if 'bowden_len' in svv %}
#      {% set default_e = svv.bowden_len %}
#    {% endif %}
#  {% endif %}
#
#  {% set x = params.X|default(default_x)|float %}
#  {% set y = params.Y|default(default_y)|float %}
#  {% set z = params.Z|default(20)|float %}
#  {% set e = params.E|default(default_e)|float %}
#
#  {% if printer.pause_resume.is_paused %}
#    {action_respond_info("Already paused")}
#  {% elif printer.toolhead.homed_axes != "xyz" %}
#    {action_respond_info("Please home XYZ first")}
#  {% else %}
#    PAUSE_PARK X={x} Y={y} Z={z}
#    M702 U{e}
#  {% endif %}

[gcode_macro M701]
gcode:
  {% set default_u = 100 %}

  {% if 'save_variables' in printer %}
    {% set svv = printer.save_variables.variables %}
    {% if 'bowden_len' in svv %}
      {% set default_u = svv.bowden_len %}
    {% endif %}
  {% endif %}

  {% set i = params.I|default(30)|float %}
  {% set i_f = params.IF|default(180)|float %}
  {% set u = params.U|default(default_u)|float %}
  {% set u_f = params.UF|default(360)|float %}
  {% set p = params.P|default(30)|float %}
  {% set p_f = params.PF|default(180)|float %}

  {% if printer.idle_timeout.state == "Printing" and not printer.pause_resume.is_paused %}
    {action_respond_info("This command cannot be used while printing")}
  {% elif printer.extruder.temperature < 170 %}
    {action_respond_info("Extruder temperature too low")}
  {% else %}
    SAVE_GCODE_STATE NAME=M701_state
    M83
    {% if i > 0.0 %}
      G1 E{i} F{i_f}
    {% endif %}
    {% if u > 0.0 %}
      G1 E{u} F{u_f}
    {% endif %}
    {% if p > 0.0 %}
      G1 E{p} F{p_f}
    {% endif %}
    RESTORE_GCODE_STATE NAME=M701_state MOVE=0
  {% endif %}

[gcode_macro M702]
gcode:
  {% set default_u = 100 %}

  {% if 'save_variables' in printer %}
    {% set svv = printer.save_variables.variables %}
    {% if 'bowden_len' in svv %}
      {% set default_u = svv.bowden_len %}
    {% endif %}
  {% endif %}

  {% set p = params.P|default(8)|float %}
  {% set p_f = params.PF|default(180)|float %}
  {% set i = params.I|default(30)|float %}
  {% set i_f = params.IF|default(180)|float %}
  {% set u = params.U|default(default_u)|float %}
  {% set u_f = params.UF|default(360)|float %}

  {% if printer.idle_timeout.state == "Printing" and not printer.pause_resume.is_paused %}
    {action_respond_info("This command cannot be used while printing")}
  {% elif printer.extruder.temperature < 170 %}
    {action_respond_info("Extruder temperature too low")}
  {% else %}
    SAVE_GCODE_STATE NAME=M702_state
    M83
    {% if p > 0.0 %}
      G1 E{p} F{p_f}
    {% endif %}
    {% if i > 0.0 %}
      G1 E-{i} F{i_f}
    {% endif %}
    {% if u > 0.0 %}
      G1 E-{u} F{u_f}
    {% endif %}
    RESTORE_GCODE_STATE NAME=M702_state MOVE=0
  {% endif %}

[gcode_macro M900]
gcode:
  {% if 'K' in params %}
    {% if 'E' in params %}
      SET_PRESSURE_ADVANCE EXTRUDER={params.E} ADVANCE={params.K}
    {% else %}
      SET_PRESSURE_ADVANCE ADVANCE={params.K}
    {% endif %}
  {% endif %}

#[gcode_macro M204.2]
#rename_existing: M204.1
#gcode:
#	{% if params.S is defined %}
#		{% set s = params.S|float %}
#		SET_VELOCITY_LIMIT ACCEL={s} ACCEL_TO_DECEL={s/2}
#	{% endif %}

#[gcode_macro M900.2]
#gcode:
#	{% if params.K is defined %}
#		{% set K = params.K|float %}
#		SET_PRESSURE_ADVANCE ADVANCE={K}
#	{% endif %}

[gcode_macro NOTIFY]
gcode:
  {% if 'MSG' in params %}
    RESPOND TYPE=command MSG="action:notification {params.MSG}"
  {% endif %}

[gcode_macro RUN_ABL]
gcode:
    M190 S60
    G28
    M104 S0        #switch off heater as it was switched on after homing
    BED_MESH_CALIBRATE
    SAVE_CONFIG
    M140 S0
    M104 S0

[gcode_macro START_PRINT]
gcode:
    #BED_TEMP={material_bed_temperature_layer_0}
  {% set BED_TEMP = params.BED_TEMP|default(0)|float %}
    #EXTRUDER_TEMP={material_print_temperature_layer_0}
    #HOTEND_TEMP={material_print_temperature_layer_0}
  {% set HOTEND_TEMP = params.HOTEND_TEMP|default(0)|float %}
    #{% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    #{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    {% set toolTemp = params.HOTEND_TEMP|int %}
    {% set bedTemp = params.BED_TEMP|int %}
    M140 S{bedTemp}                    # set Bed temp to target
    M104 S150                            # hotend temperature for homing
    M82                                 #absolute extrusion mode

    #SET_GCODE_VARIABLE MACRO=<macro_name> VARIABLE=<name> VALUE=<value>
    M220 S100                             #Reset Feedrate
    M221 S100                             #Reset Flowrate

    {% if printer.homed_axes != 'XYZ' %}
        {% if bedTemp >= 50 %}
            TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=50    # wait for bed to be over 50
        {% endif %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM=140
        M104 S0                            # extruder heater off
        G28                                # home all axes
    {% endif %}
    G90                                    # absolute positioning

    M104 S{toolTemp -70}                     #{ params.hotend_temp - 70 }
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bedTemp - 10}

    # Set temperature and move to edge of bed to avoid drooping onto it
    G0 Z20
    G0 X0 Y0
    M104 S{toolTemp}                        # wait for Hotend Temp
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={toolTemp - 1}

    # And we can now draw our purge line
	#SET_VELOCITY_LIMIT VELOCITY=100 ACCEL=1000 ACCEL_TO_DECEL=500 SQUARE_CORNER_VELOCITY=5
    SET_VELOCITY_LIMIT VELOCITY=100 ACCEL=1200 ACCEL_TO_DECEL=600 SQUARE_CORNER_VELOCITY=5
    #M201 X500.00 Y500.00 Z100.00 E5000.00 ;Setup machine max acceleration
  #M203 X500.00 Y500.00 Z10.00 E50.00 ;Setup machine max feedrate
  #M204 P500.00 R1000.00 T500.00 ;Setup Print/Retract/Travel acceleration
  #M205 X8.00 Y8.00 Z0.40 E5.00 ;Setup Jerk
  #M220 S100 ;Reset Feedrate
  #M221 S100 ;Reset Flowrate
  #G28 ;Home
  #G29 ;Auto bed Level
  G92 E0                                 #Reset Extruder
    G1 Z2.0 F3000                             #Move Z Axis up
    G1 X0 Y20 Z0.28                        #Move to start position
    G1 X0 Y200.0 Z0.28 E15                   #Draw the first line
    G1 X0 Y200.0 Z0.28                         #Move to side a little
    G1 X0.5 Y20 Z0.28 E30                     #Draw the second line
    G92 E0                                 #Reset Extruder
    G1 Z2.0 F3000                             #Move Z Axis up
    #SET_VELOCITY_LIMIT VELOCITY=200 ACCEL=5000 ACCEL_TO_DECEL=2500 SQUARE_CORNER_VELOCITY=75    #speedBenchy settings

#[gcode_macro START_PRINT-2]
## put the following in the Cura start code and remove everything else:
## start_print HOTEND_TEMP={material_print_temperature_layer_0} BED_TEMP={material_bed_temperature_layer_0}
#gcode:
#	{% set toolTemp = params.HOTEND_TEMP|int %}
#	{% set bedTemp = params.BED_TEMP|int %}
#	SET_GCODE_OFFSET Z=0
#	{% if toolTemp >= 221 %}
#		SET_GCODE_OFFSET Z=0.03
#	{% endif %}
#	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bedTemp}
#	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=150
#	M82 								# absolute extrusion mode
#	M220 S100 							# Reset Feedrate
#	M221 S100 							# Reset Flowrate
#	SET_VELOCITY_LIMIT VELOCITY=200 ACCEL=1000 ACCEL_TO_DECEL=500 SQUARE_CORNER_VELOCITY=5
#
#	#home all axis and leave printhead in center of the bed for quick Z homing once the bed is 15 degrees below its target
#	G28
#	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=150
#	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bedTemp -15}	# wait for bed to be over 50
#	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=140
#	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
#	G28	Z							# home all axes
#	SET_HEATER_TEMPERATURE HEATER=extruder TARGET={toolTemp -70}
#
#	#move to the side, wait untill the bed is within 10 deg from target heat the hotend
#	G90
#	G0 Z20
#	G0 X0 Y0
#	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bedTemp - 10}
#	SET_HEATER_TEMPERATURE HEATER=extruder TARGET={toolTemp}
#	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={toolTemp - 1}	#start printing 1 deg before reaching setpoint
#
#	# And we can now draw our purge line
#	G92 E0 								#Reset Extruder
#	G1 Z2.0 F3000 						#Move Z Axis up
#	G1 X0 Y20 Z0.28						#Move to start position
#	G1 X0 Y200.0 Z0.28 E15   			#Draw the first line
#	G1 X0 Y200.0 Z0.28 					#Move to side a little
#	G1 X0.5 Y20 Z0.28 E30 				#Draw the second line
#	G92 E0 								#Reset Extruder
#	G1 Z2.0 F3000 						#Move Z Axis up

[gcode_macro END_PRINT]
gcode:
  M106 S255 ;full fan
  G91 #Relative positioning
  #G1 E-0.5 F2700 #Retract a bit
  #G1 E-0.5 Z0.2 F2400 #Retract and raise Z
  G1 E-2 F2700 #Retract a bit
  G1 E-2 Z0.2 F2400 #Retract and raise Z
  G1 X5 Y5 F3000 #Wipe out
  #G1 X5 Y5 F5000 #Wipe out
  G1 Z10 #Raise Z more
  G90 #Absolute positioning
  #G1 X0 Y{machine_depth} ;Present print
  #G1 X0 Y225 #Present print
  #G1 X0 Y250 #Present print with enclosure
  G1 X0 Y300 #Present print
  TURN_OFF_HEATERS
  G91 ;Relative positioning
  G4 S30
  G1 E-0.5 F2700 ; retract a bit more after cooling for 30 seconds about 20 degrees
  G4 S30
  G1 E-0.5 F2700 ; retract a bit more after cooling for 30 seconds about 20 degrees
  G90 ;Absolute positioning
  M82 ;absolute extrusion mode
  TEMPERATURE_WAIT SENSOR=heater_bed MAXIMUM=50
  TEMPERATURE_WAIT SENSOR=extruder MAXIMUM=50
  M106 S0 #Turn-off fan
  M104 S0 #Turn-off hotend
  M140 S0 #Turn-off bed
  M84 X Y E #Disable all steppers but Z

[gcode_macro PAUSE_PARK]
gcode:
  {% set default_x = printer.toolhead.axis_minimum.x + 20 %}
  {% set default_y = printer.toolhead.axis_minimum.y + 20 %}

  {% if 'save_variables' in printer %}
    {% set svv = printer.save_variables.variables %}
    {% if 'park_x' in svv %}
      {% set default_x = svv.park_x %}
    {% endif %}
    {% if 'park_y' in svv %}
      {% set default_y = svv.park_y %}
    {% endif %}
  {% endif %}

  {% set x = params.X|default(default_x)|float %}
  {% set y = params.Y|default(default_y)|float %}
  {% set z = params.Z|default(20)|float %}
  {% set r = params.R|default(3)|float %}

  {% if printer.pause_resume.is_paused %}
    {action_respond_info("Already paused")}
  {% elif printer.toolhead.homed_axes != "xyz" %}
    {action_respond_info("Please home XYZ first")}
  {% else %}
    PAUSE
    {% if r > 0.0 %}
      RETRACT D={r}
    {% endif %}
    G27 X{x} Y{y} Z{z}
  {% endif %}

[gcode_macro POST_END]
gcode:
  CLEAR_PAUSE
  {% if 't5uid1' in printer %}
    DGUS_PRINT_END
  {% endif %}
  M220 S100
  M221 S100
  M900 K0
  {% if printer.extruder.temperature >= 170 %}
    M83
    G91
    G1 E-2 F2400
    G1 E-2 Z5 F2400
  {% endif %}
  M82
  G90
  G27
  M104 S0
  M140 S0
  M106 S0
  M84 X Y E
  SAVE_IF_SET

[gcode_macro POWEROFF]
gcode:
  RESPOND TYPE=command MSG=action:poweroff

# [gcode_macro POWER_OFF_PRINTER]
# gcode:
# 	{action_call_remote_method("set_device_power", device="printer", state="off")}

[gcode_macro PRE_START]
gcode:
  {% set wz = params.WZ|default(0.25)|float %}
  {% set wn = params.WN|default(0.4)|float %}
  CLEAR_PAUSE
  M106 S0
  M220 S100
  M221 S100
  M900 K0
  {% if 't5uid1' in printer %}
    DGUS_PRINT_START
  {% endif %}
  G28
  WIPE_LINE Z={wz} N={wn}

[gcode_macro RETRACT]
gcode:
  {% set f = params.F|default(600)|float %}

  {% if 'D' in params %}
    {% if printer.idle_timeout.state == "Printing" and not printer.pause_resume.is_paused %}
      {action_respond_info("This command cannot be used while printing")}
    {% elif printer.extruder.temperature < 170 %}
      {action_respond_info("Extruder temperature too low")}
    {% else %}
      SAVE_GCODE_STATE NAME=RETRACT_state
      M83
      G1 E-{params.D} F{f}
      RESTORE_GCODE_STATE NAME=RETRACT_state MOVE=0
    {% endif %}
  {% endif %}

[gcode_macro SAVE_AT_END]
variable_save: 0
gcode:
  SET_GCODE_VARIABLE MACRO=SAVE_AT_END VARIABLE=save VALUE=1

[gcode_macro SAVE_IF_SET]
gcode:
  {% if printer["gcode_macro SAVE_AT_END"].save == 1 %}
    SAVE_CONFIG
  {% endif %}

[gcode_macro WIPE_LINE]
gcode:
  {% set z = params.Z|default(0.25)|float %}
  {% set n = params.N|default(0.4)|float %}

  {% if printer.toolhead.homed_axes != "xyz" %}
    {action_respond_info("Please home XYZ first")}
  {% elif printer.extruder.temperature < 170 %}
    {action_respond_info("Extruder temperature too low")}
  {% else %}
    SAVE_GCODE_STATE NAME=WIPE_LINE_state
    M82
    G90
    G92 E0
    G1 X10 Y20 Z5 F3000
    G1 Z{z} F3000
    G1 X10 Y150 F1500 E10.83
    G1 X{ n + 10.0 } F5000
    G1 Y22 F1500 E21.5
    G1 Y20 F5000
    RESTORE_GCODE_STATE NAME=WIPE_LINE_state MOVE=0
  {% endif %}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude: 1.0
gcode:
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set z_park_delta = 2.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - z_park_delta) %}
    {% set z_safe = z_park_delta %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E-{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
    {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description: Extrudes, if the extruder is hot enough
gcode:
  {% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
  {% set use_fw_retract = False if not macro_found
                     else False if client.use_fw_retract is not defined
                     else True  if client.use_fw_retract|lower == 'true' and printer.firmware_retraction is defined
                     else False %}

  {% set length = (params.LENGTH|float) if params.LENGTH is defined
             else 1.0 if not macro_found
             else client.unretract|default(1.0) %}

  {% set speed = params.SPEED if params.SPEED is defined
            else 35 if not macro_found
            else client.speed_unretract|default(35) %}

  {% set absolute_extrude = printer.gcode_move.absolute_extrude %}

  {% if printer.extruder.can_extrude %}
    {% if use_fw_retract %}
      {% if length < 0 %}
        G10
      {% else %}
        G11
      {% endif %}
    {% else %}
      M83
      G1 E{length} F{(speed|float|abs) * 60}
      {% if absolute_extrude %}
        M82
      {% endif %}
    {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}

[gcode_macro _CLIENT_RETRACT]
description: Retracts, if the extruder is hot enough
gcode:
  {% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}

  {% set length = (params.LENGTH|float) if params.LENGTH is defined
             else 1.0 if not macro_found
             else client.retract|default(1.0) %}

  {% set speed = params.SPEED if params.SPEED is defined
            else 35 if not macro_found
            else client.speed_retract|default(35) %}

  _CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[gcode_macro TIMELAPSE_TAKE_FRAME]
gcode:
	{action_call_remote_method("timelapse_newframe")}

[gcode_macro TIMELAPSE_RENDER]
gcode:
	{action_call_remote_method("timelapse_render")}

[gcode_macro LOAD_FILAMENT]
gcode:
	{% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < 30.0 %}
		G0 Z30
    {% endif %}
    M83                            ; set extruder to relative
    G1 E45 F1000                  ; quickly load filament set for direct drive, for bowden set to E280
    G1 E30 F300                    ; slower extrusion for hotend path
    G1 E50 F150                    ; prime nozzle with filament
	#TURN_OFF_HEATERS
	G1 E-0.5 F500						; retract a bit
	#G1 E-1 F5						; retract a bit
    M82                            ; set extruder to absolute

[gcode_macro UNLOAD_FILAMENT]
gcode:
	{% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < 30.0 %}
		G0 Z30
    {% endif %}
    M83                            ; set extruder to relative
    G1 E5 F300                    ; extrude a little to soften tip
    G1 E-100 F1000                 ; retract filament completely, set to E380 for Bowden
    M82                            ; set extruder to absolute

[gcode_macro Hotend_Cleaning]
gcode:
    M83                            ; set extruder to relative
    G1 E45 F1000                  ; quickly load filament set for direct drive, for bowden set to E280
    G1 E30 F300                    ; slower extrusion for hotend path
    G1 E50 F150                    ; prime nozzle with filament
    G1 E-100 F1000                 ; retract filament completely, set to E380 for Bowden
    M82                            ; set extruder to absolute

[gcode_macro BED_LEVEL]
gcode:
    G28
    BED_MESH_CALIBRATE


[gcode_macro Z_AXI_CALIBRATE]
gcode:
    G28
    PROBE_CALIBRATE

[gcode_macro SHAPER]
gcode:
    G28
    SHAPER_CALIBRATE

[gcode_macro PID]
gcode:
    G28
    PID_CALIBRATE HEATER=extruder TARGET=200
    PID_CALIBRATE HEATER=heater_bed TARGET=60

[gcode_macro Press_Advance_short]
gcode:
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
    TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005

[gcode_macro Press_Advance_long]
gcode:
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
    TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.020

## ------------------------- Filament Change --------------------------
## M600: Filament Change. This macro will pause the printer, move the
## tool to the change position, and retract the filament 50mm. Adjust
## the retraction settings for your own extruder. After filament has
## been changed, the print can be resumed from its previous position
## with the "RESUME" gcode.
#
#[gcode_macro M600]
#gcode:
#    {% set X = 0 %}
#    {% set Y = 0 %}
#    {% set Z = 20 %}
#    {% set RetractionAmnt = 500 %}
#    SAVE_GCODE_STATE NAME=M600_state
#    PAUSE
#    G91
#    G1 E-.8 F2700
#    G1 Z{Z}
#    G90
#    G1 X{X} Y{Y} F3000
#    G91
#    G1 E-{RetractionAmnt} F1000
#    RESTORE_GCODE_STATE NAME=M600_state
## --------------------------------------------------------------------

#########################################
########## ADAPTIVE BED MESH ############
#########################################
# Written by Frix_x#0161 #
# @version: 3.0

# CHANGELOG:
#   v3.0: - added the use of [exclude_object] tags to extract the first layer bounding box (many thanks to Kyleisah for the excellent idea and inspiration)
#           the macro is still fully compatible with the old way using the SIZE parameter: it will use it if specified, or else
#           fallback to the [exclude_object] method and if both are not available, it will do a full and normal bed mesh as usual.
#         - also added a FORCE_MESH parameter to mesh even for very small parts
#         - removed the RRI that was always added put in the BED_MESH_CALIBRATE call. Now it's added only when there is one defined in the [bed_mesh] section
#   v2.3: moved the install notes into a proper markdown file in: doc > features > adaptive_bed_mesh.md
#   v2.2: removed the requirement to set mesh_pps in the [bed_mesh] section. It's now again optional as it should be
#   v2.1: fix for the nominal mesh (when no SIZE parameter is used or SIZE=0_0_0_0)
#   v2.0: split in multple macros to be able to use the center point in the z calibration bed probing position before doing the mesh
#   v1.1: fix for a bug when parsing string when using uppercase letters in the [bed_mesh] section
#   v1.0: first adaptive bed mesh macro

# -------------------------------------------------------------------------------------------------------------------------
# If you want to use it into your own config, please install it as a standalone macro as described in the
# installation section of this file: doc > features > adaptive_bed_mesh.md
# -------------------------------------------------------------------------------------------------------------------------

### What is it ? ###
# The adaptive bed mesh is simple: it's a normal bed mesh, but only "where" and "when" it's necessary.
# Sometime I print small parts, sometime I print full plates and I like to get a precise bed_mesh (like 9x9 or more). However, it take a
# lot of time and it's useless to probe all the plate for only a 5cm² part. So this is where the adaptive bed mesh is helping:
# 1. It get the corners coordinates of the fisrt layer surface either from the slicer or the [exclude_object] tags
# 2. It compute a new set of points to probe on this new zone to get at least the same precision as your standard bed mesh. For example, if
#    a normal bed mesh is set to 9x9 for 300mm², it will then compute 3x3 for a 100mm² surface. Also if for whatever reason your parts are in
#    the corner of the build plate (like for a damaged PEI in the center), it will follow them to probe this exact area.
# 3. As the probed points computed are odd, it will also compute the new relative reference index point in the center of the zone and save
#    the coordinates of this point to use them somwhere else (like the probed point of the auto z calibration plugin for example).
# 4. To go further, it will not do any bed_mesh if there is less than 3x3 points to probe (very small part alone) and choose/change the
#    algorithm (bicubic/lagrange) depending of the size and shape of the mesh computed (like 3x3 vs 3x9)

# Feel free to ping me on Discord (Frix_x#0161) if you need help or have any comments to improve it :)


# ===========================================================================================================
# DO NOT MODIFY THOSE VARIABLES (they are used internaly by the adaptive bed mesh macro)
##[gcode_macro _ADAPTIVE_MESH_VARIABLES]
##variable_ready: False
##variable_do_mesh: False
##variable_do_nominal: False
##variable_mesh_min: 0,0
##variable_mesh_max: 0,0
##variable_mesh_center: 0,0
##variable_probe_count: 0,0
##variable_rri: 0
##variable_algo: "bicubic"
##gcode:


##[gcode_macro COMPUTE_MESH_PARAMETERS]
##description: Compute the mesh parameters and store them for later use
##gcode:
##    # 1 ----- GET ORIGINAL BEDMESH PARAMS FROM CONFIG ----------------------
##    {% set xMinConf, yMinConf = printer["configfile"].config["bed_mesh"]["mesh_min"].split(',')|map('trim')|map('int') %}
##    {% set xMaxConf, yMaxConf = printer["configfile"].config["bed_mesh"]["mesh_max"].split(',')|map('trim')|map('int') %}
##    {% set xProbeCntConf, yProbeCntConf = printer["configfile"].config["bed_mesh"]["probe_count"].split(',')|map('trim')|map('int') %}
##    {% set algo = printer["configfile"].config["bed_mesh"]["algorithm"]|lower %}
##    {% set xMeshPPS, yMeshPPS = (printer["configfile"].config["bed_mesh"]["mesh_pps"]|default('2,2')).split(',')|map('trim')|map('int') %}
##
##    {% set margin = params.MARGIN|default(5)|int %} # additional margin to mesh around the first layer
##    {% set force_mesh = params.FORCE_MESH|default(False) %} # force the mesh even if it's a small part (ie. computed less than 3x3)
##
##
##  # 2 ----- GET FIRST LAYER COORDINATES and SIZE -------------------------------------
##   # If the SIZE parameter is defined and not a dummy placeholder, we use it to do the adaptive bed mesh logic
##    {% if params.SIZE is defined and params.SIZE != "0_0_0_0" %}
##        RESPOND MSG="Got a SIZE parameter for the adaptive bed mesh"
##        {% set xMinSpec, yMinSpec, xMaxSpec, yMaxSpec = params.SIZE.split('_')|map('trim')|map('int') %}
##    
##    {% elif printer.exclude_object.objects %}
##        # Else if SIZE is not defined, we fallback to use the [exclude_object] tags
##        # This method is derived from Kyleisah KAMP repository: https://github.com/kyleisah/Klipper-Adaptive-Meshing-Purging)
##        RESPOND MSG="No SIZE parameter, using the [exclude_object] tags for the adaptive bed mesh"
##        {% set eo_points = printer.exclude_object.objects|map(attribute='polygon')|sum(start=[]) %}
##        {% set xMinSpec = eo_points|map(attribute=0)|min %}
##        {% set yMinSpec = eo_points|map(attribute=1)|min %}
##        {% set xMaxSpec = eo_points|map(attribute=0)|max %}
##        {% set yMaxSpec = eo_points|map(attribute=1)|max %}
##    
##    {% else %}
##        # Else if no SIZE parameter and no [exclude_object] tags, then we want to do a nominal bed mesh
##        # so nothing to do here...
##        RESPOND MSG="No info about the first layer coordinates, doing a nominal bed mesh instead of adaptive"
##    {% endif %}
##
##
##    # If the first layer size was correctly retrieved, we can do the adaptive bed mesh logic, else we
##    # fallback to the original and nominal BED_MESH_CALIBRATE function (full bed probing)
##    {% if xMinSpec and yMinSpec and xMaxSpec and yMaxSpec %}
##
##        # 3 ----- APPLY MARGINS ----------------------------------------------
##        # We use min/max function as we want it to be constrained by the original
##        # bedmesh size. This will avoid going outside the machine limits
##        {% set xMin = [xMinConf, (xMinSpec - margin)]|max %}
##        {% set xMax = [xMaxConf, (xMaxSpec + margin)]|min %}
##        {% set yMin = [yMinConf, (yMinSpec - margin)]|max %}
##        {% set yMax = [yMaxConf, (yMaxSpec + margin)]|min %}
##
##        # 4 ----- COMPUTE A NEW PROBE COUNT ----------------------------------
##       # The goal is to have at least the same precision as from the config. So we compute an equivalent number
##        # of probe points on each X/Y dimensions (distance between two points should be the same as in the config)
##        {% set xProbeCnt = ((xMax - xMin) * xProbeCntConf / (xMaxConf - xMinConf))|round(0, 'ceil')|int %}
##        {% set yProbeCnt = ((yMax - yMin) * yProbeCntConf / (yMaxConf - yMinConf))|round(0, 'ceil')|int %}
##
##        # Then, three possibilities :
##        # a) Both dimensions have less than 3 probe points : the bed_mesh is not needed as it's a small print (if not forced).
##        # b) If one of the dimension is less than 3 and the other is greater. The print looks to be elongated and
##        #    need the adaptive bed_mesh : we add probing points to the small direction to reach 3 and be able to do it.
##        # c) If both direction are greater than 3, we need the adaptive bed_mesh and it's ok.
##        # At the end we control (according to Klipper bed_mesh method: "_verify_algorithm") that the computed probe_count is
##        # valid according to the choosen algorithm or change it if needed.
##        {% if xProbeCnt < 3 and yProbeCnt < 3 %}
##            {% if force_mesh %}
##                RESPOND MSG="Bed mesh forced (small part detected): meshing 3x3..."
##                {% set xProbeCnt = 3 %}
##                {% set yProbeCnt = 3 %}
##                {% set rRefIndex = 4 %}
##                {% set algo = "lagrange" %}
##                {% set xCenter = xMin + ((xMax - xMin) / 2) %}
##                {% set yCenter = yMin + ((yMax - yMin) / 2) %}
##                {% set mesh_min = "%d,%d"|format(xMin, yMin) %}
##                {% set mesh_max = "%d,%d"|format(xMax, yMax) %}
##                {% set probe_count = "%d,%d"|format(xProbeCnt, yProbeCnt) %}
##                {% set mesh_center = "%d,%d"|format(xCenter, yCenter) %}
##                RESPOND MSG="Computed mesh parameters: MESH_MIN={mesh_min} MESH_MAX={mesh_max} MESH_CENTER={mesh_center} PROBE_COUNT={probe_count} RELATIVE_REFERENCE_INDEX={rRefIndex} ALGORITHM={algo}"
##                SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_mesh VALUE={True}
##                SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_nominal VALUE={False}
##                SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_min VALUE='"{mesh_min}"'
##                SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_max VALUE='"{mesh_max}"'
##                SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_center VALUE='"{mesh_center}"'
##                SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=probe_count VALUE='"{probe_count}"'
##                SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=rri VALUE={rRefIndex}
##                SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=algo VALUE='"{algo}"'
##            {% else %}
##                RESPOND MSG="Computed mesh parameters: none, bed mesh not needed for very small parts"
##                SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_mesh VALUE={False}
##                {% set xCenter = xMin + ((xMax - xMin) / 2) %}
##                {% set yCenter = yMin + ((yMax - yMin) / 2) %}
##                {% set mesh_center = "%d,%d"|format(xCenter, yCenter) %} # we still compute the mesh center for those using klipper_z_calibration
##                SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_center VALUE='"{mesh_center}"'
##            {% endif %}
##        {% else %}
##            {% set xProbeCnt = [3, xProbeCnt]|max %}
##            {% set yProbeCnt = [3, yProbeCnt]|max %}
##
##            # We verify that the number of probe points on each axis is odd or add one to it
##            # This is very important to have a relative_reference_index point at the center of the mesh !
##            {% if xProbeCnt % 2 == 0 %}
##                {% set xProbeCnt = xProbeCnt + 1 %}
##            {% endif %}
##            {% if yProbeCnt % 2 == 0 %}
##                {% set yProbeCnt = yProbeCnt + 1 %}
##            {% endif %}
##
##            # Check of the probe points and interpolation algorithms according to Klipper code
##            {% if xMeshPPS != 0 or yMeshPPS != 0 %}
##                {% set probeCntMin = [xProbeCnt, yProbeCnt]|min %}
##                {% set probeCntMax = [xProbeCnt, yProbeCnt]|max %}
##                {% if algo == "lagrange" and probeCntMax > 6 %}
##                    # Lagrange interpolation tends to oscillate when using more than 6 samples: swith to bicubic
##                    {% set algo = "bicubic" %}
##                {% endif %}
##                {% if algo == "bicubic" and probeCntMin < 4 %}
##                    {% if probeCntMax > 6 %}
##                        # Impossible case: need to add probe point on the small axis to be >= 4 (we want 5 to keep it odd)
##                        {% if xProbeCnt > yProbeCnt %}
##                            {% set yProbeCnt = 5 %}
##                        {% else %}
##                            {% set xProbeCnt = 5 %}
##                        {% endif %}
##                    {% else %}
##                        # In this case bicubic is not adapted (less than 4 points): switch to lagrange
##                        {% set algo = "lagrange" %}
##                    {% endif %}
##                {% endif %}
##            {% endif %}
##
##            # 5 ----- COMPUTE THE RELATIVE_REFERENCE_INDEX POINT --------------------
##            {% set rRefIndex = (((xProbeCnt * yProbeCnt) - 1) / 2)|int %}
##            {% set xCenter = xMin + ((xMax - xMin) / 2) %}
##           {% set yCenter = yMin + ((yMax - yMin) / 2) %}
##
##            # 6 ----- FORMAT THE PARAMETERS AND SAVE THEM ---------------------------
##            {% set mesh_min = "%d,%d"|format(xMin, yMin) %}
##            {% set mesh_max = "%d,%d"|format(xMax, yMax) %}
##            {% set probe_count = "%d,%d"|format(xProbeCnt, yProbeCnt) %}
##            {% set mesh_center = "%d,%d"|format(xCenter, yCenter) %}
##            RESPOND MSG="Computed mesh parameters: MESH_MIN={mesh_min} MESH_MAX={mesh_max} MESH_CENTER={mesh_center} PROBE_COUNT={probe_count} RELATIVE_REFERENCE_INDEX={rRefIndex} ALGORITHM={algo}"
##            SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_mesh VALUE={True}
##            SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_nominal VALUE={False}
##            SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_min VALUE='"{mesh_min}"'
##            SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_max VALUE='"{mesh_max}"'
##            SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_center VALUE='"{mesh_center}"'
##            SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=probe_count VALUE='"{probe_count}"'
##            SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=rri VALUE={rRefIndex}
##            SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=algo VALUE='"{algo}"'
##        {% endif %}
##    {% else %}
##        SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_mesh VALUE={True}
##        SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_nominal VALUE={True}
##
##        {% set xCenter = xMinConf + ((xMaxConf - xMinConf) / 2) %}
##        {% set yCenter = yMinConf + ((yMaxConf - yMinConf) / 2) %}
##        {% set mesh_center = "%d,%d"|format(xCenter, yCenter) %} # we still compute the mesh center for those using klipper_z_calibration
##        SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_center VALUE='"{mesh_center}"'
##    {% endif %}
##
##    # Finaly save in the variables that we already computed the values
##    SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=ready VALUE={True}


##[gcode_macro ADAPTIVE_BED_MESH]
##description: Perform a bed mesh, but only where and when it's needed
##gcode:
##    {% set ready = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].ready %}
##
##    {% if not 'xyz' in printer.toolhead.homed_axes %}
##        { action_raise_error("Must Home printer first!") }
##    {% endif %}
##
##    # If the parameters where computed, we can do the mesh by calling the _DO_ADAPTIVE_MESH
##    {% if ready %}
##        _DO_ADAPTIVE_MESH
##
##    # If the parameters where not computed prior to the ADAPTIVE_BED_MESH call, we call the COMPUTE_MESH_PARAMETERS
##    # macro first and then call the _DO_ADAPTIVE_MESH macro after it
##    {% else %}
##        RESPOND MSG="Adaptive bed mesh: parameters not already computed, automatically calling the COMPUTE_MESH_PARAMETERS macro prior to the mesh"
##        COMPUTE_MESH_PARAMETERS {rawparams}
##        M400 # mandatory to flush the gcode buffer and be sure to use the last computed parameters
##        _DO_ADAPTIVE_MESH
##    {% endif %}


##[gcode_macro _DO_ADAPTIVE_MESH]
##gcode:
##    # 1 ----- POPULATE BEDMESH PARAMS FROM SAVED VARIABLES ----------------------
##    {% set do_mesh = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].do_mesh %}
##    {% set do_nominal = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].do_nominal %}
##    {% set mesh_min = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].mesh_min %}
##    {% set mesh_max = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].mesh_max %}
##    {% set probe_count = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].probe_count %}
##    {% set rRefIndex = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].rri %}
##    {% set algo = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].algo %}
##
##    # 2 --------- ADAPTIVE_BED_MESH LOGIC --------------------------------------
##
##    # If it's necessary to do a mesh
##    {% if do_mesh %}
##        # If it's a standard bed_mesh to be done
##        {% if do_nominal %}
##            RESPOND MSG="Adaptive bed mesh: nominal bed mesh"
##            BED_MESH_CALIBRATE
##        {% else %}
##            {% if printer["configfile"].config["bed_mesh"]["relative_reference_index"] is defined %}
##                RESPOND MSG="Adaptive bed mesh: MESH_MIN={mesh_min} MESH_MAX={mesh_max} PROBE_COUNT={probe_count} RELATIVE_REFERENCE_INDEX={rRefIndex} ALGORITHM={algo}"
##                BED_MESH_CALIBRATE MESH_MIN={mesh_min} MESH_MAX={mesh_max} PROBE_COUNT={probe_count} RELATIVE_REFERENCE_INDEX={rRefIndex} ALGORITHM={algo}
##            {% else %}
##                RESPOND MSG="Adaptive bed mesh: MESH_MIN={mesh_min} MESH_MAX={mesh_max} PROBE_COUNT={probe_count} ALGORITHM={algo}"
##                BED_MESH_CALIBRATE MESH_MIN={mesh_min} MESH_MAX={mesh_max} PROBE_COUNT={probe_count} ALGORITHM={algo}
##            {% endif %}
##        {% endif %}
##    {% else %}
##        RESPOND MSG="Adaptive bed mesh: no mesh to be done"
##    {% endif %}
##
##    # Set back the 'ready' parameter to false
##    SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=ready VALUE={False}

## Client klipper macro definitions
##
## Copyright (C) 2022 Alex Zellner <alexander.zellner@googlemail.com>
##
## This file may be distributed under the terms of the GNU GPLv3 license
##
## !!! This file is read-only. Maybe the used editor indicates that. !!!
##
## Customization:
##   1) copy the gcode_macro _CLIENT_VARIABLE (see below) to your printer.cfg
##   2) remove the comment mark (#) from all lines
##   3) change any value in there to your needs
##
## Use the PAUSE macro direct in your M600:
##  e.g. with a different park position front left and a minimal height of 50 
##    [gcode_macro M600]
##    description: Filament change
##    gcode: PAUSE X=10 Y=10 Z_MIN=50
##  Z_MIN will park the toolhead at a minimum of 50 mm above to bed to make it easier for you to swap filament.
##
## Client variable macro for your printer.cfg
#[gcode_macro _CLIENT_VARIABLE]
#variable_use_custom_pos   : False ; use custom park coordinates for x,y [True/False]
#variable_custom_park_x    : 0.0   ; custom x position; value must be within your defined min and max of X
#variable_custom_park_y    : 0.0   ; custom y position; value must be within your defined min and max of Y
#variable_custom_park_dz   : 2.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
#variable_retract          : 1.0   ; the value to retract while PAUSE
#variable_cancel_retract   : 5.0   ; the value to retract while CANCEL_PRINT
#variable_speed_retract    : 35.0  ; retract speed in mm/s
#variable_unretract        : 1.0   ; the value to unretract while RESUME
#variable_speed_unretract  : 35.0  ; unretract speed in mm/s
#variable_speed_hop        : 15.0  ; z move speed in mm/s
#variable_speed_move       : 100.0 ; move speed in mm/s
#variable_park_at_cancel   : False ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
#variable_park_at_cancel_x : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
#variable_park_at_cancel_y : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
## !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
#variable_use_fw_retract  : False ; use fw_retraction instead of the manual version [True/False]
#gcode:
